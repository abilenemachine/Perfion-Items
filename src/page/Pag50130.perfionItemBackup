/*
page 50150 perfionItem
{
    APIGroup = 'AM';
    APIPublisher = 'Addie';
    APIVersion = 'v1.05';
    Caption = 'perfionItem';
    EntityName = 'perfionItem';
    EntitySetName = 'perfionItem';
    PageType = API;
    Editable = false;
    SourceTable = Item;
    SourceTableView = sorting("No.") where(Type = const(Inventory), "Add To Perfion" = const(true));
    ODataKeyFields = SystemId;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field(id; Rec.SystemId) { }
                field(No; Rec."No.") { }
                field(Description; Rec.Description) { }
                field(UnitCost; Rec."Unit Cost") { }
                field(GTIN; Rec.GTIN) { }
                field(Blocked; Rec.Blocked) { }
                field(ReplenishmentSystem; Rec."Replenishment System") { }
                field(InventoryPostingGroup; Rec."Inventory Posting Group") { }
                field(VendorNo; Rec."Vendor No.") { }
                //field(VendorItemNo; Rec."Vendor Item No.") { }
                field(ItemCategoryCode; Rec."Item Category Code") { }
                field(LastDateTimeModified; Rec."Last DateTime Modified") { }
                field(DropShip; Rec."Drop Ship") { }
                field(Length; length) { }
                field(Width; width) { }
                field(Height; height) { }
                field(Cubage; cubage) { }
                field(Weight; weight) { }
                field(ItemClass; class) { }
                field(ReferenceNo; reference) { }
                field(PurchasePrice; price) { }


            }
        }
    }

    trigger OnAfterGetCurrRecord()
    var
    begin
        getUom();
        getItemClass();
        getPurchasePrice();
        getItemRef();
    end;

    trigger OnOpenPage()
    var
    begin
        //getLength();
    end;

    var
        length: Decimal;
        width: Decimal;
        height: Decimal;
        cubage: Decimal;
        weight: Decimal;
        class: text[30];
        procureVendor: Code[20];
        reference: Code[50];
        price: Decimal;

    local procedure getUom(): Decimal
    var
        ItemUOM: Record "Item Unit of Measure";
    begin
        ItemUOM.Reset();
        ItemUOM.SetRange("Item No.", Rec."No.");
        ItemUOM.SetRange(Code, 'EACH');
        if ItemUOM.Find('+') then begin
            length := ItemUOM.Length;
            width := ItemUOM.Width;
            height := ItemUOM.Height;
            cubage := ItemUOM.Cubage;
            weight := ItemUOM.Weight;
        end
        else begin
            length := 0;
            width := 0;
            height := 0;
            cubage := 0;
            weight := 0;
        end;
    end;

    local procedure getItemClass(): text[30]
    var
        ItemProc: Record "LAX DP Procurement Unit";
    begin
        ItemProc.Reset();
        ItemProc.SetRange("Item No.", Rec."No.");
        if ItemProc.Find('+') then
            repeat
                case ItemProc."Replenishment Source Type" of
                    Enum::"LAX DP Replen. Source Type"::Vendor:
                        begin

                        end;
                    Enum::"LAX DP Replen. Source Type"::Location:
                        begin

                        end;
                    Enum::"LAX DP Replen. Source Type"::Assembly:
                        begin

                        end;
                end;
                //item class should always prioritze from location KS else whichever
                if (ItemProc."Replenishment Source Type" = Enum::"LAX DP Replen. Source Type"::Vendor) then begin
                    class := ItemProc."Item Class Description";
                    procureVendor := ItemProc."Replenishment Source Code";
                    exit
                end
                else begin
                    if (ItemProc."Replenishment Source Type" = Enum::"LAX DP Replen. Source Type"::Location) then begin
                        //if location = KS and source type = location
                        //get the replinshment source code to match to procurement list location code and FAB
                        //get that replinshment source code
                        //example AMAR55180 = prod180 (fab180)
                        //use unit cost on item card (no item ref number)
                        class := ItemProc."Item Class Description";
                        procureVendor := ItemProc."Replenishment Source Code";
                        exit
                    end
                    // IF assembly then unit cost on item card (no item ref number)


                end;
            until ItemProc.Next() = 0
        else
            class := '';
        procureVendor := '';
    end;

    local procedure getItemRef(): Code[50]
    var
        ItemRef: Record "Item Reference";
    begin
        ItemRef.Reset();
        ItemRef.SetRange("Item No.", Rec."No.");
        ItemRef.SetRange("Reference Type No.", Rec."Vendor No.");
        if ItemRef.Find('+') then
            reference := ItemRef."Reference No."
        else
            reference := '';
    end;

    local procedure getPurchasePrice(): Decimal
    var
        ItemPrice: Record "Price List Line";
    begin
        ItemPrice.Reset();
        ItemPrice.SetRange("Asset No.", Rec."No.");
        ItemPrice.SetRange("Product No.", Rec."No.");
        ItemPrice.SetRange("Assign-to No.", Rec."Vendor No.");
        ItemPrice.SetRange("Minimum Quantity", 0);
        if ItemPrice.Find('+') then
            price := ItemPrice."Direct Unit Cost"
        else
            price := 0;
    end;
}
*/